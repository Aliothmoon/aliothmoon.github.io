<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skadi</title>
  
  
  <link href="https://aliothmoon.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliothmoon.github.io/"/>
  <updated>2023-03-05T07:39:26.833Z</updated>
  <id>https://aliothmoon.github.io/</id>
  
  <author>
    <name>Aliothmoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git Process</title>
    <link href="https://aliothmoon.github.io/2023/03/06/Git/"/>
    <id>https://aliothmoon.github.io/2023/03/06/Git/</id>
    <published>2023-03-06T07:27:33.000Z</published>
    <updated>2023-03-05T07:39:26.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Linux常用指令"><a href="#Linux常用指令" class="headerlink" title="Linux常用指令"></a>Linux常用指令</h2><ol><li>cd：改变目录</li><li>cd..回退到上一级目录，直接cd进入默认目录</li><li>pwd：显示当前所在的目录路径</li><li>ls（ll）：列出当前列表中所有文件，ll更加详细</li><li>touch：创建新文件</li><li>mkdir：创建一个文件夹</li><li>rm-r：删除一个文件夹</li><li>reset：重新初始化终端&#x2F;清屏</li><li>clear：清屏</li><li>history：查看命令历史</li></ol><h2 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h2><img src="D:\notebook\Git.assets\image-20221001143536623.png" alt="image-20221001143536623" style="zoom:80%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="D:\notebook\Git.assets\image-20221001150717708.png" alt="image-20221001150717708"></p><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git-log<span class="comment">#自己配置的git-log</span></span><br></pre></td></tr></table></figure><p>作用:查看提交记录</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID <span class="comment"># commitID 可以使用 git-log 或 git log 指令查看</span></span><br></pre></td></tr></table></figure><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbranch 分支名</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitcheckout分支名</span><br></pre></td></tr></table></figure><h3 id="创建并切换"><a href="#创建并切换" class="headerlink" title="创建并切换"></a>创建并切换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitmerge分支</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitbranch -d 分支名</span><br><span class="line"><span class="comment">#删除分支，但需要做检查</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名</span><br><span class="line"><span class="comment">#强制删除分支</span></span><br></pre></td></tr></table></figure><h3 id="添加至暂存区"><a href="#添加至暂存区" class="headerlink" title="添加至暂存区"></a>添加至暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><img src="D:\notebook\Git.assets\image-20221001151034844.png" alt="image-20221001151034844" style="zoom:150%;" /><h3 id="提交暂存区的东西至本地仓库"><a href="#提交暂存区的东西至本地仓库" class="headerlink" title="提交暂存区的东西至本地仓库"></a>提交暂存区的东西至本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;备注&quot;</span></span><br></pre></td></tr></table></figure><img src="D:\notebook\Git.assets\image-20221001151423652.png" alt="image-20221001151423652" style="zoom:150%;" /><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;仓库名称&gt; &lt;地址&gt;</span><br><span class="line"><span class="comment">#eg：</span></span><br><span class="line">git remote add origin https://gitee.com/YoungYa001/young-ya-first.git</span><br></pre></td></tr></table></figure><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitremote</span><br></pre></td></tr></table></figure><h3 id="推送至远程"><a href="#推送至远程" class="headerlink" title="推送至远程"></a>推送至远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">git push [-f] [--set-upstream] [远端名称] [本地分支名][:远端分支名]</span><br><span class="line">+ `-f`  表示强制推送，**一般在公司内没有这个的使用权限**，否则容易冲掉远程仓库的所有代码</span><br><span class="line">    + `--set-upstream` 推送到远端的同时，建立起和远端分支的关联关系。用于第一次推送时。</span><br><span class="line">    + 如果当前分支已经和远端分支关联，则可以省略分支名和远端名</span><br><span class="line">        + git push 将master分支推送到已关联的远端分支</span><br><span class="line"><span class="comment">#### 4.2.4 本地分支与远程分支的关联关系</span></span><br><span class="line">+ 命令：</span><br><span class="line">```sh</span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><p>直接使用gitpush就直接将文件提交到远程了</p><h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt; [本地目录]</span><br></pre></td></tr></table></figure><p>本地目录可以省略，会自动生成一个目录</p><h3 id="从远程仓库中抓取和拉取"><a href="#从远程仓库中抓取和拉取" class="headerlink" title="从远程仓库中抓取和拉取"></a>从远程仓库中抓取和拉取</h3><p>抓取命令：<br>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并<br>如果不指定远端名称和分支名，则抓取所有分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote name] [branch name]</span><br></pre></td></tr></table></figure><p>拉取命令：<br>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge<br>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote name] [branch name]</span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>首先创建一个.gitignore文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt<span class="comment">#忽略所有 .txt结尾的文件</span></span><br><span class="line">!lib.txt<span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp<span class="comment">#仅忽略项目根目录下的TODO文件，不包括其他目录temp</span></span><br><span class="line">build/<span class="comment">#忽略bulid/目录下的所有文件</span></span><br><span class="line">doc/*.txt会忽略doc/note.txt 但不包括doc/sever/arch.txt</span><br></pre></td></tr></table></figure><h2 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h2><p>登录码云之后设置本机绑定SSH公钥，实现免密登录！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-ketgen -r rsa</span><br></pre></td></tr></table></figure><p><strong>IDEA或者web Storm都有集成git操作集成</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;Linux常用指令&quot;&gt;&lt;a href=&quot;#Linux常用指令&quot; class=&quot;headerlink&quot; title=&quot;Lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java GUI</title>
    <link href="https://aliothmoon.github.io/2023/03/05/Java%20GUI/"/>
    <id>https://aliothmoon.github.io/2023/03/05/Java%20GUI/</id>
    <published>2023-03-05T07:27:33.000Z</published>
    <updated>2023-03-05T07:39:26.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-GUI"><a href="#Java-GUI" class="headerlink" title="Java GUI"></a>Java GUI</h1><h2 id="Awt"><a href="#Awt" class="headerlink" title="Awt"></a>Awt</h2><p>Frame组件 （窗口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"><span class="comment">//        设置窗口位置</span></span><br><span class="line">        frame.setLocation(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//        设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"><span class="comment">//        设置是否可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>Panel组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"><span class="comment">//      设置窗口位置及大小</span></span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">600</span>,<span class="number">600</span>);</span><br></pre></td></tr></table></figure><p>按钮乱码需要加 -Dfile.encoding&#x3D;gbk </p><p>ScrollPanel组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ScrollPane.SCROLLBARS_ALWAYS);</span><br><span class="line">pane.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;测试文本&quot;</span>));</span><br><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个按钮&quot;</span>);</span><br><span class="line">button.setSize(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">pane.add(button);</span><br></pre></td></tr></table></figure><p> <img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027142908075.png" alt="image-20221027142908075"></p><p> <img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027163813527.png" alt="image-20221027163813527"></p><p><img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027165625465.png" alt="image-20221027165625465"></p><p><img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027170021816.png" alt="image-20221027170021816"></p><p><img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027171357300.png" alt="image-20221027171357300"></p><p>   <img src="C:\Users\Heimweh\AppData\Roaming\Typora\typora-user-images\image-20221027171642347.png" alt="image-20221027171642347"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-GUI&quot;&gt;&lt;a href=&quot;#Java-GUI&quot; class=&quot;headerlink&quot; title=&quot;Java GUI&quot;&gt;&lt;/a&gt;Java GUI&lt;/h1&gt;&lt;h2 id=&quot;Awt&quot;&gt;&lt;a href=&quot;#Awt&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Yaml</title>
    <link href="https://aliothmoon.github.io/2023/03/04/Yaml/"/>
    <id>https://aliothmoon.github.io/2023/03/04/Yaml/</id>
    <published>2023-03-04T07:27:33.000Z</published>
    <updated>2023-03-05T07:35:13.544Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Java Nio</title>
    <link href="https://aliothmoon.github.io/2023/03/03/Java%20NIO/"/>
    <id>https://aliothmoon.github.io/2023/03/03/Java%20NIO/</id>
    <published>2023-03-03T07:27:33.000Z</published>
    <updated>2023-03-05T07:35:13.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p><em><strong>*缓冲区的四个属性*</strong></em><br>所有的缓冲区都具有四个属性来提供关于其所包含的数据元素的信息，这四个属性尽管简单，但其至关重要，需熟记于心：</p><ul><li>**容量(Capacity)**：缓冲区能够容纳的数据元素的最大数量。这一容量在缓冲区创建时被设定，并且永远不能被改变。</li><li><strong>上界(Limit)：</strong>缓冲区的第一个不能被读或写的元素。缓冲创建时，limit 的值等于 capacity 的值。假设 capacity &#x3D;<br>1024，我们在程序中设置了 limit &#x3D; 512，说明，Buffer 的容量为 1024，但是从 512 之后既不能读也不能写，因此可以理解成，Buffer<br>的实际可用大小为 512。</li><li><strong>位置(Position)：</strong>下一个要被读或写的元素的索引。位置会自动由相应的 get() 和 put() 函数更新。 这里需要注意的是positon的位置是从0开始的。</li><li><strong>标记(Mark)：</strong>一个备忘位置。标记在设定前是未定义的(undefined)。使用场景是，假设缓冲区中有 10 个元素，position 目前的位置为<br>2(也就是如果get的话是第三个元素)，现在只想发送 6 - 10 之间的缓冲数据，此时我们可以 buffer mark( buffer.position() )<br>，即把当前的 position 记入 mark 中，然后 buffer.postion(6)，此时发送给 channel 的数据就是 6 - 10 的数据。发送完后，我们可以调用<br>buffer.reset() 使得 position &#x3D; mark，因此这里的 mark 只是用于临时记录一下位置用的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        手动翻转</span></span><br><span class="line"><span class="comment">//        buffer.limit(buffer.position()).position(0);</span></span><br><span class="line"><span class="comment">//        等同于上</span></span><br><span class="line"><span class="comment">//        buffer.flip();</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-NIO&quot;&gt;&lt;a href=&quot;#Java-NIO&quot; class=&quot;headerlink&quot; title=&quot;Java NIO&quot;&gt;&lt;/a&gt;Java NIO&lt;/h1&gt;&lt;h2 id=&quot;Buffer&quot;&gt;&lt;a href=&quot;#Buffer&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
</feed>
